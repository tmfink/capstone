#!/usr/bin/env python
# Capstone Disassembly Engine
# By Travis Finkenauer <tmfinken@gmail.com>, 2018 */

"""Generates global Capstone variable declarations"""

from __future__ import print_function

import os
import sys
import time


ARCH_INFO = [
    ("CAPSTONE_HAS_ARM", "CS_ARCH_ARM", "ARM",
     ["CS_MODE_LITTLE_ENDIAN", "CS_MODE_ARM", "CS_MODE_V8",
      "CS_MODE_MCLASS", "CS_MODE_THUMB", "CS_MODE_BIG_ENDIAN"]),
    ("CAPSTONE_HAS_ARM64", "CS_ARCH_ARM64", "AArch64",
     ["CS_MODE_LITTLE_ENDIAN", "CS_MODE_ARM", "CS_MODE_BIG_ENDIAN"]),
    ("CAPSTONE_HAS_MIPS", "CS_ARCH_MIPS", "Mips",
     ["CS_MODE_LITTLE_ENDIAN", "CS_MODE_32", "CS_MODE_64", "CS_MODE_MICRO",
      "CS_MODE_MIPS32R6", "CS_MODE_MIPSGP64", "CS_MODE_BIG_ENDIAN"]),
    ("CAPSTONE_HAS_X86", "CS_ARCH_X86", "X86",
     ["CS_MODE_LITTLE_ENDIAN", "CS_MODE_32", "CS_MODE_64", "CS_MODE_16"]),
    ("CAPSTONE_HAS_POWERPC", "CS_ARCH_PPC", "PPC",
     ["CS_MODE_LITTLE_ENDIAN", "CS_MODE_32", "CS_MODE_64",
      "CS_MODE_BIG_ENDIAN"]),
    ("CAPSTONE_HAS_SPARC", "CS_ARCH_SPARC", "Sparc",
     ["CS_MODE_BIG_ENDIAN", "CS_MODE_V9"]),
    ("CAPSTONE_HAS_SYSZ", "CS_ARCH_SYSZ", "SystemZ",
     ["CS_MODE_BIG_ENDIAN"]),
    ("CAPSTONE_HAS_XCORE", "CS_ARCH_XCORE", "XCore",
     ["CS_MODE_BIG_ENDIAN"]),
]

GLOBALS_FILE = 'cs_arch_globals.c'


def interpolate_format(format_, arch_info, modes_formatter=None):
    """Print the interpolated output of each arch"""
    if modes_formatter is None:
        modes_formatter = lambda x: ""

    for cs_has, cs_arch, pretty_name, allowed_modes in arch_info:
        print(format_.format(
            cs_has=cs_has, cs_arch=cs_arch, pretty_name=pretty_name,
            allowed_modes=modes_formatter(allowed_modes)).strip())


ARCH_INIT_FMT = """
#ifdef {cs_has}
\t{pretty_name}_global_init,
#else
\tNULL,
#endif
"""

ARCH_OPTION_FMT = """
#ifdef {cs_has}
\t{pretty_name}_option,
#else
\tNULL,
#endif
"""

ARCH_DESTROY_FMT = """
#ifdef {cs_has}
\t{pretty_name}_destroy,
#else
\tNULL,
#endif
"""

ALLOWED_MODES_FMT = """
#ifdef {cs_has}
\t{allowed_modes},
#else
\t0,
#endif
"""

ALL_ARCH_FMT = """
#ifdef {cs_has}
\t(1 << {cs_arch})
#else
\t0
#endif
"""

HEADER = """
/* Capstone Disassembly Engine */

/* AUTOGENERATED by {script} */
/* DO NOT MODIFY DIRECTLY! */

#include "cs_priv.h"

#include "arch/AArch64/AArch64Module.h"
#include "arch/ARM/ARMModule.h"
#include "arch/Mips/MipsModule.h"
#include "arch/PowerPC/PPCModule.h"
#include "arch/Sparc/SparcModule.h"
#include "arch/SystemZ/SystemZModule.h"
#include "arch/X86/X86Module.h"
#include "arch/XCore/XCoreModule.h"

"""


def print_global_def(arch_info):
    """Print global variables"""

    print(HEADER.format(
        year=time.gmtime().tm_year,
        script=os.path.basename(__file__)
    ).lstrip())

    print('cs_err (*cs_arch_init[MAX_ARCH])(cs_struct *) = {')
    interpolate_format(ARCH_INIT_FMT, arch_info)
    print("};")

    print()
    print('cs_err (*cs_arch_option[MAX_ARCH]) (cs_struct *, cs_opt_type, size_t value) = {')
    interpolate_format(ARCH_OPTION_FMT, arch_info)
    print("};")

    print()
    print('void (*cs_arch_destroy[MAX_ARCH]) (cs_struct *) = {')
    interpolate_format(ARCH_DESTROY_FMT, arch_info)
    print("};")

    def modes_formatter(masks):
        """Format as NOT of OR'd flags"""
        return "~({})".format(' | '.join(masks))
    print()
    print('cs_mode cs_arch_disallowed_mode_mask[MAX_ARCH] = {')
    interpolate_format(ALLOWED_MODES_FMT, arch_info, modes_formatter=modes_formatter)
    print("};")

    print()
    print('unsigned int all_arch =')
    arch_fmts = []
    for cs_has, cs_arch, pretty_name, allowed_modes in arch_info:
        arch_fmt = ALL_ARCH_FMT.format(
            cs_has=cs_has, cs_arch=cs_arch, pretty_name=pretty_name,
            allowed_modes=allowed_modes).strip()
        arch_fmts.append(arch_fmt)
    print('\n\t|\n'.join(arch_fmts))
    print("\t;")


def main():
    """Parse arguments"""
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--update', action='store_true',
                        help='Overwrite ' + GLOBALS_FILE)
    args = parser.parse_args()

    if args.update:
        globals_file = os.path.join(os.path.dirname(__file__), GLOBALS_FILE)
        sys.stdout = open(globals_file, 'w')

    print_global_def(ARCH_INFO)


if __name__ == '__main__':
    main()
